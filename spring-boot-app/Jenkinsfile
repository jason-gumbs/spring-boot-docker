pipeline {

  environment {
    PROJECT = "sandbox-io-289003"
    APP_NAME = "jason-app"
    FE_SVC_NAME = "${APP_NAME}-frontend"
    CLUSTER = "jenkins-cd"
    CLUSTER_ZONE = "us-east1-d"
    IMAGE_TAG = "gcr.io/${PROJECT}/${APP_NAME}:${env.BRANCH_NAME}.${env.BUILD_NUMBER}"
    JENKINS_CRED = "${PROJECT}"
  }

  agent {
    kubernetes {
      label 'build-deploy-agent'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  component: ci
spec:
  # Use service account that can deploy to all namespaces
  serviceAccountName: cd-jenkins
  containers:
  - name:  maven
    image:  maven
    imagePullPolicy: IfNotPresent
    command:
    - cat
    tty: true
  - name: gcloud
    image: google/cloud-sdk:slim
    imagePullPolicy: IfNotPresent
    command:
    - cat
    tty: true
  - name: kubectl
    image: bitnami/kubectl:latest
    imagePullPolicy: IfNotPresent
    command:
    - cat
    tty: true
"""
}
  }
  stages {
    stage('Compilation') {
       steps {
        container('maven') {
         dir("spring-boot-app") {
          sh "mvn clean install -DskipTests"
          stash includes: 'target/spring-boot-docker.jar', name: 'builtSources' 
          }
        }
      }
    }
    stage('Build and push image with Container Builder') {
      steps {
        container('gcloud') {
          dir("spring-boot-app") {
          unstash 'builtSources'
          sh "PYTHONUNBUFFERED=1 gcloud builds submit -t ${IMAGE_TAG} ."
         }
        }
      }
    }
  }
}
